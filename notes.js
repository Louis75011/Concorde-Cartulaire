// README

// Draft Mercuriale des Chartes
// Mercuriale des Chartes
// Cartulaire : √©voque la tradition m√©di√©vale, les registres d‚Äôactes, chartes et titres. Cela inspire s√©rieux, enracinement, m√©moire. Id√©al pour un site qui veut se poser comme gardien et ordonnateur de documents.
// Concordancier : renvoie √† l‚Äôoutil d‚Äôindexation des mots dans un corpus, mais aussi √† l‚Äôid√©e d‚Äôharmonie (concordia). Plus technique, moins chaleureux, mais efficace si l‚Äôaccent est mis sur recherche et analyse.
// Pr√©senter et d√©fendre le choix des technologies employ√©es
// Pr√©senter les fonctionnalit√©s d√©velopp√©es et les potentielles fonctionnalit√©s √† d√©velopper prochainement (?).

//  Explication notebookLm
// Impressions √©crans api / pages

// G√©n√©ration de PDF

// Corrections erreur de tout l'IDE

// Voici la liste des routes API pouvant √™tres appel√©es directement depuis un navigateur ou Postman √† l‚Äôadresse `http://localhost:3000/` :

// ## üåê Vos endpoints disponibles

// ### Authentification

// * `POST /api/auth/totp/enroll` ‚Üí g√©n√®re un secret TOTP + QR code (SVG).

// * `POST /api/auth/totp/verify` ‚Üí v√©rifie et active le TOTP.

// * `POST /api/auth/webauthn/register/options` ‚Üí g√©n√®re les options d‚Äôinscription WebAuthn.

// * `POST /api/auth/webauthn/register/verify` ‚Üí finalise l‚Äôinscription d‚Äôune passkey.

// * `POST /api/auth/webauthn/auth/options` ‚Üí g√©n√®re les options de connexion WebAuthn.

// * `POST /api/auth/webauthn/auth/verify` ‚Üí finalise la connexion avec passkey.

// ---

// ### Clients

// * `GET /api/clients` ‚Üí liste les clients (+ recherche `?q=` possible).
// * `POST /api/clients` ‚Üí cr√©e un client.
// * `GET /api/clients/[id]` ‚Üí r√©cup√®re un client par ID.
// * `PATCH /api/clients/[id]` ‚Üí modifie un client.
// * `DELETE /api/clients/[id]` ‚Üí supprime un client.

// ---

// ### Collaborateurs

// * `GET /api/collaborateurs`
// * `POST /api/collaborateurs`
//   *(selon votre impl√©mentation dans `route.ts`)*

// ---

// ### Contrats

// * `GET /api/contrats`
// * `POST /api/contrats`
// * `GET /api/contrats/options`
// * `POST /api/contrats/options`

// ---

// ### Factures

// * `GET /api/factures`
// * `POST /api/factures`
// * `GET /api/factures/options`
// * `POST /api/factures/options`

// ---

// ### Prestataires

// * `GET /api/prestataires`
// * `POST /api/prestataires`

// ---

// ### Paiements (GoCardless)

// * `POST /api/payments/gocardless/mandate`
// * `POST /api/payments/gocardless/ping`
// * `POST /api/payments/gocardless/webhook`

// ---

// ### Signatures (DocuSeal)

// * `POST /api/signature/docuseal/create`
// * `POST /api/signature/docuseal/ping`
// * `POST /api/signature/docuseal/webhook`

// ---

// ### Comptabilit√©

// * `POST /api/accounting/export`

// ---

// ## üìå Exemple d‚Äôappels rapides

// ```bash
// # Lister les clients ou les collaborateurs
// curl http://localhost:3000/api/clients
// curl http://localhost:3000/api/collaborateurs

// # Cr√©er un client
// Utiliser Invoke-RestMethod (PowerShell natif)
// Invoke-RestMethod -Uri "http://localhost:3000/api/clients" `
//   -Method Post `
//   -Headers @{ "Content-Type" = "application/json" } `
//   -Body '{"nom":"Dupont","email":"dupont@example.com"}'

